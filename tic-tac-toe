<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic-Tac-Toe Game</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-800 text-white flex items-center justify-center min-h-screen">
  <div>
    <h1 class="text-3xl font-bold mb-4 text-center">Tic-Tac-Toe</h1>
    <div class="grid grid-cols-3 gap-2 w-64 mx-auto" id="board">
      <!-- Cells will be dynamically added here -->
    </div>
    <p id="message" class="mt-4 text-center text-lg font-semibold"></p>
    <button id="reset" class="mt-4 bg-blue-600 hover:bg-blue-500 text-white py-2 px-4 rounded block mx-auto">Reset Game</button>
  </div>

  <script>
    // Game logic
    const board = document.getElementById('board');
    const message = document.getElementById('message');
    const resetButton = document.getElementById('reset');

    let gameState = Array(9).fill(null); // Tracks moves (null, 'X', 'O')
    let currentPlayer = 'X';
    let gameActive = true;

    // Winning combinations
    const winningCombinations = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8],
      [0, 3, 6], [1, 4, 7], [2, 5, 8],
      [0, 4, 8], [2, 4, 6]
    ];

    // Create board cells
    function createBoard() {
      board.innerHTML = '';
      gameState.forEach((_, index) => {
        const cell = document.createElement('div');
        cell.className = 'bg-gray-700 w-16 h-16 flex items-center justify-center text-2xl font-bold cursor-pointer';
        cell.dataset.index = index;
        cell.addEventListener('click', handleCellClick);
        board.appendChild(cell);
      });
    }

    // Handle cell click
    function handleCellClick(event) {
      const index = event.target.dataset.index;
      if (gameState[index] || !gameActive) return;

      gameState[index] = currentPlayer;
      event.target.textContent = currentPlayer;

      if (checkWinner()) {
        message.textContent = `Player ${currentPlayer} wins!`;
        gameActive = false;
      } else if (gameState.every(cell => cell)) {
        message.textContent = 'It\'s a draw!';
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        message.textContent = `Player ${currentPlayer}\'s turn`;
      }
    }

    // Check for a winner
    function checkWinner() {
      return winningCombinations.some(combination => {
        const [a, b, c] = combination;
        return gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c];
      });
    }

    // Reset game
    resetButton.addEventListener('click', () => {
      gameState.fill(null);
      currentPlayer = 'X';
      gameActive = true;
      message.textContent = 'Player X\'s turn';
      createBoard();
    });

    // Initialize game
    createBoard();
    message.textContent = 'Player X\'s turn';
  </script>
</body>
</html>
